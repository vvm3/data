StudentDashboard

// utils
import { useState, useEffect, useMemo } from "react";
import { toast } from "sonner";

//Actions - fetch function
import { getCandidateDetails } from "@/app/actions/application/university";

//Hooks - state updater custom hook
import { useGenericStateUpdater } from "@/hooks/common/useGenericStateUpdate";

//Components
import Footer from "../custom/footer";
import MyDashboard from "./StudentDashboards/MyDashboard/page";
import ApplicationDateId from "./StudentDashboards/MyDashboard/(widgets)/ApplicationDateId";
import DocumentStatus from "./StudentDashboards/MyDashboard/(widgets)/DocumentStatus";
import ApplicationStatus from "./StudentDashboards/MyDashboard/(widgets)/ApplicationStatus";

//Interfaces & Types - // State interface and initial state
import { AdmissionStatus, initialState, Status, StudentDashboardState } from "@/interface/dashboard/studentDashboard";
import { AdmissionFeePaymentSummary } from "./StudentDashboards/MyDashboard/(widgets)/FeeAndPayment/AdmissionFeePaymentSummary";
import AdmissionFeeStatus from "./StudentDashboards/MyDashboard/(widgets)/FeeAndPayment/AdmissionFeeStatus";
import AdmissionProgressStatus from "./StudentDashboards/MyDashboard/(widgets)/AdmissionPogressWidgets/AdmissionProgressStatus";
import { fetchFeePayments, updateFeePaymentStatus } from "@/app/actions/student-account/fee-payment";
import { fetchReceiptById } from "@/app/actions/accounts/receipt";
import { getAdmissionProgress } from "@/app/actions/admission/application";


// Function to map backend status to frontend Status type
const getApplicationStatus = (status: string): Status => {
    switch (status) {
        case "Pending":
            return "Under Review";
        case "Admitted":
            return "Approved";
        case "not-verified":
            return "Submitted";
        case "verified":
            return "Under Review";
        case "Rejected":
            return "Rejected";
        case "Approved":
            return "Approved";
        default:
            return "Submitted";
    }
}

/**
 * Student Dashboard component.
 * Fetches candidate details, displays application status, document verification chart,
 * and conditionally renders either the dashboard widgets or the approved dashboard view.
 */

const StudentDashboard = (): JSX.Element => {
    const [state, setState] = useState<StudentDashboardState>(initialState);
    const updateState = useGenericStateUpdater(setState);

    // Function to fetch candidate details and update state
    const fetchForm = async () => {
        try {

            //Fetch the admission progress
            const progress = await getAdmissionProgress();
            console.log(progress);
            if (progress) {
                updateState({ admissionProgress: progress });
            }

            // Fetch the detailed receipt
            const studentFeeDetails = await fetchFeePayments();
            const selectedPaymentId = studentFeeDetails[0]._id;
            const receipt = await fetchReceiptById(selectedPaymentId);
            if (receipt) {
                updateState({ receiptData: receipt }); // store the receipt in state
            }

            //Fetch the candidate details 
            const data = await getCandidateDetails(true);
            if (data) {
                updateState({ applicationId: data.ApplicationID });
                updateState({ applicationDate: data.ApplicationDetails.ApplicationDate });
                updateState({ verificationData: data.DocumentsSubmitted });
                updateState({ currentStatus: getApplicationStatus(data?.ApplicationDetails?.ApplicationStatus ?? "") as Status });
                updateState({ isApproved: (data?.ApplicationDetails?.ApplicationStatus === "Admitted") || (data?.ApplicationDetails?.ApplicationStatus === "Approved") });
            }
        } catch (error: any) {
            toast.error(error.message);
        }
    };

    //initial fetch
    useEffect(() => {
        fetchForm();
    }, []);


    return (
        <>
            {/* Dashboard Header */}
            <div className="flex flex-wrap items-center py-3 px-4 border bg-background gap-2 sm:gap-4 h-auto sm:h-[53px] box-border w-full rounded-lg shadow-lg mb-4">
                <p className="text-[20px]">Dashboard</p>
            </div>

            {/* Main Dashboard Content */}
            <div className="border shadow-lg rounded-lg bg-background h-fit p-4 flex flex-col">
                <div className="overflow-y-auto custom-scrollbar p-3">
                    <div className="h-[calc(100vh-230px)]">
                        <>
                            {/* Application Status and Document Verification Section */}
                            <div className="flex flex-wrap lg:flex-row gap-5">
                                <ApplicationStatus currentStatus={state.currentStatus} />
                                <ApplicationDateId appDate={state.applicationDate} appId={state.applicationId} />
                                {/* <div className="flex w-full flex-col flex-wrap"> */}
                                <div className="w-full flex flex-col md:flex-wrap">
                                    <h2 className="my-2 font-semibold text-[22px]">Fee and Payment Widgets</h2>
                                    <div className="flex gap-4 flex-col md:flex-row">
                                        <AdmissionFeePaymentSummary receiptData={state.receiptData} />
                                        <AdmissionFeeStatus receiptData={state.receiptData} />
                                    </div>
                                </div>

                                <div className="flex w-full flex-col md:flex-wrap">
                                    <h2 className="my-2 font-semibold text-[22px]">Admission Progress Widgets</h2>
                                    <div className="flex gap-5 flex-col md:flex-row">
                                        {/* <AdmissionProgressStatus currentStatus="Submitted" /> */}
                                        <AdmissionProgressStatus progress={state.admissionProgress} />
                                    </div>
                                </div>

                                {/* Right side - Document Verification Chart */}
                                {!state.isApproved && (
                                    <div className="w-full sm:w-[400px] md:w-[400px] lg:w-[400px] flex justify-center">
                                        <DocumentStatus
                                            verificationData={state.verificationData}
                                        />
                                    </div>
                                )}
                                {/* Conditionally render MyDashboard if approved */}
                                {state.isApproved && (
                                    <>
                                        <MyDashboard />
                                    </>
                                )
                                }
                            </div>
                        </>

                    </div>
                </div>
            </div >

            {/* Footer */}
            <Footer />
        </>
    );
};

export default StudentDashboard;








Admission progress status


"use client";

import { Card, CardContent, CardHeader } from "@/components/ui/card";
import { IAdmissionProgress } from "@/interface/dashboard/studentDashboard";
import { Check } from "lucide-react";

// Ordered steps for admission progress
const admissionSteps = [
    "Enquiry",
    "Application Submitted",
    "Verification",
    "Payment",
    "Admission Confirmed",
];

// Helper function to map API data to step index
const getAdmissionStepIndex = (progress?: IAdmissionProgress): number => {
    if (!progress) return 0; // Default: Enquiry

    if (progress.confirmed) return 4;     // Admission Confirmed
    if (progress.paymentDue) return 3;    // Payment
    if (progress.meritList) return 2;     // Verification
    if (progress.underReview) return 1;   // Application Submitted
    if (progress.Submitted) return 1;     // ðŸ‘ˆ Submitted also maps to step 1

    return 0; // Enquiry
};


export default function AdmissionProgressStatus({ progress }: { progress?: IAdmissionProgress }) {
    const currentIndex = getAdmissionStepIndex(progress);
    console.log(currentIndex);
    console.log("progress"+ JSON.stringify(progress));

    return (
        <Card className="rounded-2xl shadow-md h-fit w-full sm:w-[700px] lg:w-[700px] md:w-[700px]">
            {/* Header */}
            <CardHeader className="p-4">
                <h2 className="text-gray-600 dark:text-muted-foreground">
                    Admission Progress Status
                </h2>
            </CardHeader>

            {/* Progress Steps */}
            <CardContent className="p-4 overflow-x-auto custom-scrollbar">
                <div className="flex items-center justify-between min-w-[650px]">
                    {admissionSteps.map((step, idx) => {
                        const isCompleted = idx <= currentIndex;
                        return (
                            <div
                                key={step}
                                className="flex flex-col items-center relative flex-1"
                            >
                                {/* Step Indicator */}
                                <div
                                    className={`w-10 h-10 flex items-center justify-center rounded-full border-2 z-10 transition-all duration-300 ${isCompleted
                                        ? "bg-primary border-primary text-white"
                                        : "bg-gray-200 border-gray-300 text-gray-400"
                                        }`}
                                >
                                    <Check size={20} />
                                </div>

                                {/* Step Label */}
                                <p className="mt-2 text-sm dark:text-muted-foreground text-center whitespace-nowrap min-h-[24px]">
                                    {step}
                                </p>

                                {/* Connecting line */}
                                {idx < admissionSteps.length - 1 && (
                                    <div
                                        className={`absolute top-5 left-1/2 h-1 w-full ${idx < currentIndex ? "bg-primary" : "bg-gray-300"
                                            }`}
                                    />
                                )}
                            </div>
                        );
                    })}
                </div>
            </CardContent>
        </Card>
    );
}





application status


"use client";

// Props interface and status steps
import { ApplicationProgressProps, statusSteps } from "@/interface/dashboard/studentDashboard";

// UI Card components   
import { Card, CardContent, CardHeader } from "@/components/ui/card";

// Check icon from lucide-react                        
import { Check } from "lucide-react";


/** 
 * ApplicationStatus Component
 *
 * Displays the progress of an application as a series of steps.
 * - Uses the `statusSteps` array to define all possible steps.
 * - Highlights the current step and all steps before it as completed.
 * - Shows a progress indicator with circles and connecting lines.
 *
**/

// ApplicationStatus component to display the progress of the application
export default function ApplicationStatus({ currentStatus }: ApplicationProgressProps) {

  // Determine the current index of the application status
  const currentIndex = statusSteps.indexOf(currentStatus);

  return (

    <Card className="rounded-2xl shadow-md h-fit w-full sm:w-[600px] lg:w-[600px] md:w-[600px]">

      {/* Header */}
      <CardHeader className="p-4">
        <h2 className="text-gray-600 dark:text-muted-foreground">My Application Status</h2>
      </CardHeader>
      {/* Progress Steps */}
      <CardContent className="p-4 overflow-x-auto custom-scrollbar">
        <div className="flex items-center justify-between min-w-[550px]">
          {statusSteps.map((step, idx) => {
            const isCompleted = idx <= currentIndex;
            return (
              // Each step in the application process
              <div
                key={step}
                className="flex flex-col items-center relative flex-1"
              >
                {/* Step Indicator */}
                <div
                  className={`w-10 h-10 flex items-center justify-center rounded-full border-2 z-10 transition-all duration-300 ${isCompleted
                    ? "bg-primary border-primary text-white"
                    : "bg-gray-200 border-gray-300 text-gray-400"
                    }`}
                >
                  <Check size={20} />
                </div>
                <p className="mt-2 text-sm dark:text-muted-foreground">{step}</p>
                {/* Render the connecting line between steps, except after the last step */}
                {idx < statusSteps.length - 1 && (
                  <div
                    className={`absolute top-5 left-1/2 h-1 w-full ${idx < currentIndex ? "bg-primary" : "bg-gray-300"
                      }`}
                  />
                )}
              </div>
            );
          })}
        </div>
      </CardContent>
    </Card>
  );
}
 




application date and id


"use client";
// UI Card components
import { Card, CardContent, CardHeader } from "@/components/ui/card";

// Icons from lucide-react
import { CalendarDays, Copy } from "lucide-react";
import { useState } from "react";

// Props interface
import { ApplicationInfoProps } from "@/interface/dashboard/studentDashboard";




/**
 * ApplicationDateId Component
 *
 * Displays two cards side by side:
 * 1. Application Submission Date (formatted)
 * 2. Application ID with a copy-to-clipboard feature
 * */


export default function ApplicationDateId({ appDate, appId }: ApplicationInfoProps) {
  const [copied, setCopied] = useState(false);

  // Format the application date
  const dateStr = appDate ? new Date(appDate) : undefined;
  const appdatestr = dateStr
    ? dateStr
        .toLocaleDateString("en-US", {
          day: "2-digit",
          month: "short",
          year: "numeric",
        })
        .replace(/(\w+)\s(\d+),\s(\d{4})/, "$2 $1 $3")
    : "";


  // Function to handle copying the application ID to clipboard
  const handleCopy = async () => {
    try {
      // Ensure appId exists before copying
      if (!appId) {
        console.error("No Application ID available to copy.");
        return;
      }
      await navigator.clipboard.writeText(String(appId));
      setCopied(true);

      // Reset tooltip after 2 seconds
      setTimeout(() => setCopied(false), 2000);
    } catch (error) {
      console.error("Failed to copy Application ID:", error);
      // (Optional) show a fallback UI feedback
      alert("Unable to copy Application ID. Please try manually.");
    }
  };


  return (
    // Two cards container
    <>      {/* Application Date Card */}
      <Card className="rounded-2xl shadow-md flex-1 w-max sm:min-w-[300px] lg:min-w-[300px] md:min-w-[300px]">
        <CardHeader className="p-4">
          <h2 className="text-gray-600 dark:text-muted-foreground">
            Application Submission Date
          </h2>
        </CardHeader>
        <CardContent className="p-4">
          {/* Display calendar icon and formatted date */}
          <div className="flex flex-row items-center gap-5">
            <CalendarDays className="w-10 h-10 text-primary" />
            <span className="text-[24px] font-bold dark:text-muted-foreground">
              {appdatestr || "â€”"}
            </span>
          </div>
        </CardContent>
      </Card>

      {/* Application ID Card */}
      <Card className="rounded-2xl shadow-md flex-1 w-max sm:min-w-[300px] lg:min-w-[300px] md:min-w-[300px]">
        <CardHeader className="p-4">
          <h2 className="text-gray-600 dark:text-muted-foreground">
            Application ID
          </h2>
        </CardHeader>
        <CardContent className="p-4">
          {/* Display application ID with copy icon */}
          <div className="flex flex-row items-center gap-5">
            <span className="text-[24px] font-bold break-words dark:text-muted-foreground">
              {appId || "â€”"}
            </span>
            {/* Copy to clipboard icon with feedback */}
            <div className="relative flex flex-col items-center" aria-label="Copy Application ID" role="button">
              <Copy
                className="w-10 h-10 text-primary cursor-pointer hover:scale-90 transition-transform"
                onClick={handleCopy}
              /> {copied && (
                <span className="absolute z-50 top-full mt-2 px-3 py-2 w-max rounded-md bg-primary dark:foreground text-white text-xs shadow">
                  Copied to clipboard
                </span>
              )}
            </div>
          </div>
        </CardContent>
      </Card>
    </>
  );

}
 



admission fee paymemt summary

// UI component imports
import { Card, CardContent, CardHeader } from "@/components/ui/card";

// Props interface import
import { AdmissionFeePaymentSummaryProps } from "@/interface/dashboard/studentDashboard";

/**
 * AdmissionFeePaymentSummary Component
 *
 * This component displays a summary of the student's admission fee payment.
 * It shows key details such as the total amount paid, payment date, and payment mode.
 * The component handles both cases:
 *  - When receipt data is available (renders actual values)
 *  - When receipt data is not yet available (renders placeholder/default values)
 *
 * Props:
 *  - receiptData: IReceipt | undefined
 *      The receipt object fetched from the backend API.
 *      If undefined, the component displays default placeholders.
 *
 * Example Usage:
 *  <AdmissionFeePaymentSummary receiptData={state.receiptData} />
 *
 */
export const AdmissionFeePaymentSummary = ({ receiptData }: AdmissionFeePaymentSummaryProps) => {

    //convert date into string
    const dateStr = receiptData ? new Date(receiptData.ReceiptData.receiptDate) : undefined;
    const paymentDateStr = dateStr
        ? dateStr
            .toLocaleDateString("en-US", {
                day: "2-digit",
                month: "short",
                year: "numeric",
            })
            .replace(/(\w+)\s(\d+),\s(\d{4})/, "$2 $1 $3") // Convert "Sep 15, 2025" to "15 Sep 2025"
        : "";

    const Headings = receiptData ? [
        { title: "Amount Paid", value: receiptData.TotalRecievedAmount },
        { title: "Date", value: paymentDateStr },
        { title: "Payment Mode", value: receiptData.ReceiptData.paymentType }
    ] : [
        { title: "Amount Paid", value: 0 },
        { title: "Date", value: "-" },
        { title: "Payment Mode", value: "-" }
    ];

    return (
        <Card className="rounded-2xl shadow-md w-full">
            {/* Card Header */}
            <CardHeader className="p-4">
                <h2 className="text-gray-600 dark:text-muted-foreground">
                    Admission Fee Payment Summary
                </h2>
            </CardHeader>

            {/* Card Content */}
            <CardContent className="p-4 overflow-x-auto custom-scrollbar">
                {Headings.map((heading, id) => (
                    <div key={id} className="flex justify-between gap-10 py-2 border-b last:border-0">
                        {/* Heading title */}
                        <span className="font-medium dark:text-muted-foreground">{heading.title}</span>
                        {/* Heading value */}
                        <span className="text-muted-foreground">{heading.value}</span>
                    </div>
                ))}
            </CardContent>
        </Card>
    );
};




admission fee status


// "use client";

// import { useEffect, useState } from "react";

// // Recharts
// import {
//     PieChart,
//     Pie,
//     Label,
//     ResponsiveContainer,
//     LabelList,
// } from "recharts";

// // Custom chart components
// import {
//     ChartConfig,
//     ChartContainer,
//     ChartTooltip,
//     ChartTooltipContent,
// } from "@/components/ui/chart";

// // Utils
// import { getChartConfig } from "@/lib/utils";

// // UI
// import { Card, CardContent, CardHeader } from "@/components/ui/card";
// import { IChartData } from "@/interface/admission/statistics/IChartData";

// // Props interface
// interface PaymentPieProps {
//     total: number;
//     paid: number;
//     pending: number;
// }

// interface ChartItem {
//     key: string;
//     value: number;
//     label: string;
// }

// /**
//  * PaymentPieChart Component
//  *
//  * Displays a pie chart visualization of payment status.
//  * - Shows Paid and Pending amounts.
//  * - Displays total payment amount in the center.
//  * - Uses Recharts for chart rendering with a custom legend.
//  */
// export default function AdmissionFeeStatus({ total, paid, pending }: PaymentPieProps) {
//     const [chartData, setChartData] = useState<IChartData[]>([]);
//     const [chartConfigData, setChartConfigData] = useState<ChartConfig>({});

//     // Update chart data when props change
//     useEffect(() => {
//         if (total > 0) {
//             const newChartData: IChartData[] = [
//                 { key: "Paid", value: paid, label: "Paid" },
//                 { key: "Pending", value: pending, label: "Pending" },
//             ];
//             setChartData(newChartData);

//             const config = getChartConfig(newChartData);
//             setChartConfigData(config);
//         }
//     }, [total, paid, pending]);

//     // Empty state
//     if (total === 0) {
//         return (
//             <Card className="rounded-2xl shadow-md w-full">
//                 <CardContent className="p-6 text-center text-gray-500 dark:text-muted-foreground">
//                     No payment data available
//                 </CardContent>
//             </Card>
//         );
//     }

//     return (
//         <Card className="rounded-2xl shadow-md w-full sm:w-[400px] md:w-[400px] lg:w-[400px]">
//             {/* Header */}
//             <CardHeader className="p-4">
//                 <h2 className="text-gray-600 dark:text-muted-foreground text-base md:text-lg">
//                     Pending Fee Dues/Status
//                 </h2>
//             </CardHeader>

//             {/* Chart Content */}
//             <CardContent className="p-4 overflow-x-auto custom-scrollbar">
//                 <ChartContainer config={chartConfigData} className="mx-auto">
//                     <div className="flex items-center h-full min-w-[300px]">
//                         {/* Responsive pie chart */}
//                         <ResponsiveContainer width={250} height={200}>
//                             <PieChart role="img" aria-label="Payment status chart">
//                                 {/* Tooltip */}
//                                 <ChartTooltip
//                                     cursor={false}
//                                     content={<ChartTooltipContent />}
//                                 />

//                                 {/* Pie */}
//                                 <Pie
//                                     data={Object.keys(chartConfigData).map((data, idx) => ({
//                                         ...chartConfigData[data],
//                                         fill: chartConfigData[data].color, // Use automated color
//                                     }))}
//                                     dataKey="value"
//                                     nameKey="label"
//                                     innerRadius={60}
//                                     outerRadius={100}
//                                     strokeWidth={10}
//                                 >
//                                     {/* Labels for slices */}
//                                     <LabelList
//                                         dataKey="key"
//                                         className="fill-white"
//                                         stroke="none"
//                                         fontSize={12}
//                                     />

//                                     {/* Center label showing total */}
//                                     <Label
//                                         content={({ viewBox }) => {
//                                             if (viewBox && "cx" in viewBox && "cy" in viewBox) {
//                                                 return (
//                                                     <text
//                                                         x={viewBox.cx}
//                                                         y={viewBox.cy}
//                                                         textAnchor="middle"
//                                                         dominantBaseline="middle"
//                                                     >
//                                                         <tspan
//                                                             x={viewBox.cx}
//                                                             y={viewBox.cy}
//                                                             className="fill-foreground text-sm font-semibold dark:text-muted-foreground"
//                                                         >
//                                                             Total
//                                                         </tspan>
//                                                         <tspan
//                                                             x={viewBox.cx}
//                                                             y={(viewBox.cy || 0) + 18}
//                                                             className="fill-foreground text-lg font-bold dark:text-muted-foreground"
//                                                         >
//                                                             {total}
//                                                         </tspan>
//                                                     </text>
//                                                 );
//                                             }
//                                         }}
//                                     />
//                                 </Pie>
//                             </PieChart>
//                         </ResponsiveContainer>

//                         {/* Legend */}
//                         <div className="flex flex-col gap-2 mr-5 w-fit text-[15px] ml-4">
//                             {chartData.map((item) => (
//                                 <div key={item.key} className="flex items-center gap-2">
//                                     <span
//                                         className="w-3 h-3 rounded-full"
//                                         style={{ backgroundColor: chartConfigData[item.key]?.color || "#888" }}
//                                     />
//                                     <span className="dark:text-muted-foreground">{item.label}</span>
//                                 </div>
//                             ))}
//                         </div>
//                     </div>
//                 </ChartContainer>
//             </CardContent>
//         </Card>
//     );
// }


"use client";

import { useEffect, useState } from "react";

// Recharts
import { PieChart, Pie, Label, ResponsiveContainer, LabelList } from "recharts";

// Custom chart components
import { ChartConfig, ChartContainer, ChartTooltip, ChartTooltipContent } from "@/components/ui/chart";

// Utils
import { getChartConfig } from "@/lib/utils";

// UI
import { Card, CardContent, CardHeader } from "@/components/ui/card";
import { IChartData } from "@/interface/admission/statistics/IChartData";
import { PaymentPieProps } from "@/interface/dashboard/studentDashboard";

/**
 * AdmissionFeeStatus Component
 *
 * Displays a pie chart visualization of fee payment status.
 * - Slices: Paid and Pending amounts
 * - Center: Total expected amount
 * - Uses Recharts and a custom legend similar to DocumentStatus component
 *
 * Props:
 *  - receiptData: IReceipt | undefined
 */
export default function AdmissionFeeStatus({ receiptData }: PaymentPieProps) {
  const [chartData, setChartData] = useState<IChartData[]>([]);
  const [chartConfigData, setChartConfigData] = useState<ChartConfig>({});

  // Calculate Paid, Pending, Total from receiptData
  useEffect(() => {
    if (receiptData) {
      const total = receiptData.TotalExpectedAmount;
      const paid = receiptData.TotalRecievedAmount;
      const pending = total - paid;

      const data: IChartData[] = [
        { key: "Paid", value: paid, label: "Paid" },
        { key: "Pending", value: pending, label: "Pending" },
      ];

      setChartData(data);
      setChartConfigData(getChartConfig(data));
    }
  }, [receiptData]);

  // Empty state
  if (!receiptData || receiptData.TotalExpectedAmount === 0) {
    return (
      <Card className="rounded-2xl shadow-md w-full">
        <CardContent className="p-6 text-center text-gray-500 dark:text-muted-foreground">
          No payment data available
        </CardContent>
      </Card>
    );
  }

  //To show total amount at middile of chart
  const total = receiptData.TotalExpectedAmount;

  return (
    <Card className="rounded-2xl shadow-md w-full sm:w-[400px] md:w-[400px] lg:w-[400px]">
      {/* Header */}
      <CardHeader className="p-4">
        <h2 className="text-gray-600 dark:text-muted-foreground">
          Fee Payment Dues/Status
        </h2>
      </CardHeader>

      {/* Chart Content */}
      <CardContent className="p-4 overflow-x-auto custom-scrollbar">
        <ChartContainer config={chartConfigData} className="mx-auto">
          <div className="flex items-center justify-center h-full min-w-[300px]">
            {/* Responsive Pie Chart */}
            <ResponsiveContainer width={250} height={200}>
              <PieChart>
                <ChartTooltip cursor={false} content={<ChartTooltipContent />} />
                <Pie
                  data={Object.keys(chartConfigData).map((key) => ({
                    ...chartConfigData[key],
                    fill: chartConfigData[key].color,
                  }))}
                  dataKey="value"
                  nameKey="label"
                  innerRadius={60}
                  outerRadius={100}
                  strokeWidth={10}
                >
                  <LabelList dataKey="key" className="fill-white" stroke="none" fontSize={12} />

                  {/* Center label showing total */}
                  <Label
                    content={({ viewBox }) => {
                      if (viewBox && "cx" in viewBox && "cy" in viewBox) {
                        return (
                          <text x={viewBox.cx} y={viewBox.cy} textAnchor="middle" dominantBaseline="middle">
                            <tspan
                              x={viewBox.cx}
                              y={viewBox.cy}
                              className="fill-foreground text-sm font-semibold dark:text-muted-foreground"
                            >
                              Total
                            </tspan>
                            <tspan
                              x={viewBox.cx}
                              y={(viewBox.cy || 0) + 18}
                              className="fill-foreground text-lg font-bold dark:text-muted-foreground"
                            >
                              {total}
                            </tspan>
                          </text>
                        );
                      }
                    }}
                  />
                </Pie>
              </PieChart>
            </ResponsiveContainer>

            {/* Legend */}
            <div className="flex flex-col gap-2 mr-5 w-fit text-[15px] ml-4">
              {chartData.map((item) => (
                <div key={item.key} className="flex items-center gap-2">
                  <span
                    className="w-3 h-3 rounded-full"
                    style={{ backgroundColor: chartConfigData[item.key]?.color || "#888" }}
                  />
                  <span className="dark:text-muted-foreground">{item.label}</span>
                </div>
              ))}
            </div>
          </div>
        </ChartContainer>
      </CardContent>
    </Card>
  );
}




document status


"use client";

import { useEffect, useState } from "react";

// Recharts components for pie chart
import {
  PieChart,
  Pie,
  Label,
  ResponsiveContainer,
  LabelList,
} from "recharts";
import {
  ChartConfig,
  ChartContainer,
  ChartTooltip,
  ChartTooltipContent,
} from "@/components/ui/chart";

// utils
import { getChartConfig } from "@/lib/utils";

// UI  components
import { Card, CardContent, CardHeader } from "@/components/ui/card";

// Props interface
import { IChartData } from "@/interface/admission/statistics/IChartData";
import { DocumentStatusProps } from "@/interface/dashboard/studentDashboard";



/**
 * DocumentStatus Component
 *
 * Displays a pie chart visualization of document verification statuses.
 * - Accepts verification data as props.
 * - Aggregates the count of documents by their status.
 * - Uses Recharts to render a pie chart along with a custom legend.
 *
**/

//  DocumentStatus component to display document verification status
export default function DocumentStatus({
  verificationData
}: DocumentStatusProps) {

  const [chartConfigData, SetChartConfigData] = useState<ChartConfig>({});          // Chart configuration state
  const [chartConfig, setChartConfig] = useState<IChartData[]>([]);                 // Chart data state

  // Update chartConfig when verificationData changes
  useEffect(() => {
    if (verificationData.length > 0) {
      const statusCount: Record<string, number> = {};
      verificationData.forEach(
        (doc: {
          Id: string;
          Status?: string;
        }) => {
          if (doc.Status) {
            statusCount[doc.Status] = (statusCount[doc.Status] || 0) + 1;
          }
        }
      );
      // console.log(statusCount)
      const chartData = Object.keys(statusCount).map((status) => ({
        key: status,
        value: statusCount[status],
        label: status,
      }));
      setChartConfig(chartData);
    }
  }, [verificationData])

  // Update chartConfigData when chartConfig changes
  useEffect(() => {
    if (chartConfig && chartConfig.length > 0) {
      // console.log("chartConfig", chartConfig);
      const data = getChartConfig(chartConfig)
      SetChartConfigData(data);
    }
  }, [JSON.stringify(chartConfig)]);

  if (!chartConfigData) {
    return <></>
  }

  return (
    // Card container for document status
    <Card className="rounded-2xl shadow-md w-full h-fit">
      {/* Header */}
      <CardHeader className="p-4">
        <h2 className="text-gray-600 dark:text-muted-foreground">
          Document Verification Status
        </h2>
      </CardHeader>

      {/* Chart Content */}
      <CardContent className="p-4 overflow-x-auto custom-scrollbar">
        <ChartContainer config={chartConfigData} className="mx-auto">
          <div className="flex items-center justify-center h-full min-w-[300px]">
            {/* Responsive container for pie chart */}
            <ResponsiveContainer width={250} height={200}>
              <PieChart>
                {/* Tooltip for displaying detailed information */}
                <ChartTooltip
                  cursor={false}
                  content={<ChartTooltipContent />}
                />

                {/* Pie Chart */}
                <Pie
                  data={Object.keys(chartConfigData).map((data, idx) => ({
                    ...chartConfigData[data],
                    fill: chartConfigData[data].color, // Use automated color
                  }))}
                  dataKey="value"
                  nameKey="label"
                  innerRadius={60}
                  outerRadius={100}
                  strokeWidth={10}
                >

                  {/* Labels for each pie slice */}
                  <LabelList
                    dataKey="key"
                    className="fill-white"
                    stroke="none"
                    fontSize={12}
                    formatter={(value: keyof typeof chartConfigData) => {
                      // Defensive check in case chartConfigData or value is missing
                      if (!value || !chartConfigData[value]) {
                        return value || ""; // fallback: show raw value or nothing
                      }
                      return chartConfigData[value].label;
                    }}
                  />

                  {/* Center label */}
                  <Label
                    content={({ viewBox }) => {
                      if (viewBox && "cx" in viewBox && "cy" in viewBox) {
                        return (
                          // Centered "Status" label
                          <text
                            x={viewBox.cx}
                            y={viewBox.cy}
                            textAnchor="middle"
                            dominantBaseline="middle"
                          >
                            <tspan
                              x={viewBox.cx}
                              y={viewBox.cy}
                              className="fill-foreground text-base font-semibold dark:text-muted-foreground"
                            >
                              Status
                            </tspan>
                          </text>
                        );
                      }
                    }}
                  />
                </Pie>
              </PieChart>
            </ResponsiveContainer>

            {/* Legend */}
            <div className="flex flex-col gap-2 mr-5 w-fit text-[15px] ml-4">
              {/* Map through chartConfigData to create legend items */}
              {Object.keys(chartConfigData).map((data, id) => (
                <div key={data} className="flex items-center gap-2">
                  {/* Colored indicator for each status */}
                  <span
                    className="w-3 h-3 rounded-full"
                    style={{ backgroundColor: chartConfigData[data].color || "#888888" }}
                  />
                  <span className="dark:text-muted-foreground">{data}</span>
                </div>
              ))}
            </div>
          </div>
        </ChartContainer>
      </CardContent>
    </Card>
  );
}
 


my dashboard

'use client';

// Dynamic imports for widgets (only on the client-side)
import dynamic from "next/dynamic";

// Dynamically load components with no SSR (Server-Side Rendering) for performance
const Announcement = dynamic(() => import('./(widgets)/Announcement'), { ssr: false });
const ExamSchedule = dynamic(() => import('./(widgets)/ExamSchedule'), { ssr: false });
const Performance = dynamic(() => import('./(widgets)/Performance'), { ssr: false });
const TimeTable = dynamic(() => import('./(widgets)/TimeTable'), { ssr: false });

const MyDashboard = () => {
    return (
        <div className="flex w-full flex-col gap-4 h-[calc(100vh-200px)] p-2 pt-0 pl-0">

            {/* First section with Announcement and Performance widgets */}
            <div className="grid grid-cols-[1fr] lg:grid-cols-[3fr_1fr] gap-4">
                <div><Announcement /></div>
                <div><Performance /></div>
            </div>

            {/* Second section with TimeTable and ExamSchedule widgets */}
            <div className="grid grid-cols-[1fr] lg:grid-cols-[2fr_2fr] gap-4">
                <div><TimeTable /></div>
                <div><ExamSchedule /></div>
            </div>
        </div>
    )
}

export default MyDashboard;




application.ts


// Admission Progress API call
export const getAdmissionProgress = async (): Promise<IAdmissionProgress | null> => {
    try {
        const res = await fetch(
            `${BASE_URL}/student/application/progress`,
            {
                method: "GET",
                credentials: "include",
                headers: JSON_HEADERS,
            }
        );

        if (!res.ok) {
            throw new Error(`Failed to fetch admission progress. Status: ${res.status}`);
        }

        const { data } = await res.json();
        return data; // ðŸ‘ˆ admission progress object
    } catch (error) {
        console.error("Error fetching admission progress:", error);
        return null;
    }
};



studentDashboard.ts


import { IDocumentFile } from "@/schema/admission/application-schema";
import { IReceipt } from "../accounts/receipt-management/IReceipt";

// Define the possible statuses for the application
export type Status =
  | "Pending"
  | "Draft"
  | "Submitted"
  | "Under Review"
  | "Approved"
  | "Rejected"
  | "";

// Define the possible admission statuses
export type AdmissionStatus =
  | "Enquiry"
  | "Application Submitted"
  | "Verfication"
  | "Payment"
  | "Admission Confirmed"
  | "";

// Define the state interface for the student dashboard
export interface StudentDashboardState {
  isApproved: boolean;
  currentStatus: Status;
  applicationId?: number;
  applicationDate?: Date | string;
  verificationData: IDocumentFile[];
  receiptData?: IReceipt;
  admissionProgress: IAdmissionProgress;
}

// Define the possible statuses for the application
export const initialState: StudentDashboardState = {
  isApproved: false,
  currentStatus: "",
  applicationId: undefined,
  applicationDate: undefined,
  verificationData: [],
  receiptData: undefined,
  admissionProgress: {          // ðŸ‘ˆ initialize here
    Submitted: true,
    underReview: false,
    meritList: false,
    paymentDue: false,
    confirmed: false,
  },
};

// Define the structure for document verification data
export type VerificationData = {
  key: string;
  value: number;
  fill: string;
};

// Define the props for the DocumentStatus component
export interface DocumentStatusProps {
  verificationData: IDocumentFile[];
}

// Define the props for the ApplicationStatus component
export interface ApplicationProgressProps {
  currentStatus: Status;
}

// Define the steps in the application process
export const statusSteps: Status[] = [
  "Draft",
  "Submitted",
  "Under Review",
  "Approved",
  "Rejected",
];

//Define the application status props
export interface ApplicationInfoProps {
  appDate?: string | Date;
  appId?: number;
}

//Define the payment summary props
export interface AdmissionFeePaymentSummaryProps {
  receiptData?: IReceipt;
}

// Props interface payment pie chart
export interface PaymentPieProps {
  receiptData?: IReceipt;
}

// Define the shape of admission progress from API
export interface IAdmissionProgress {
  Submitted: boolean;
  underReview: boolean;
  meritList: boolean;
  paymentDue: boolean;
  confirmed: boolean;
}



fee-payment.ts

export const fetchFeePayments = (status?: string, academicYearId?: string) => {
    return apiFetch<FeePayment[]>(`/student/fee/student${status ? `?status=${status}` : ''}`); //path
};


receipt.ts


export const fetchReceiptById = (id:string) =>
    apiFetch<IReceipt>(`/student/fee-receipt-display/${id}`);



IChartData.ts

export interface IChartData {
    key: string;
    value: number;
    label?: string;
}



chart.tsx

"use client"

import * as React from "react"
import * as RechartsPrimitive from "recharts"

import { cn } from "@/lib/utils"

// Format: { THEME_NAME: CSS_SELECTOR }
const THEMES = { light: "", dark: ".dark" } as const

export type ChartConfig = {
  [k in string]: {
    label?: React.ReactNode
    icon?: React.ComponentType
  } & (
    | { color?: string; theme?: never }
    | { color?: never; theme: Record<keyof typeof THEMES, string> }
  )
}

type ChartContextProps = {
  config: ChartConfig
}

const ChartContext = React.createContext<ChartContextProps | null>(null)

function useChart() {
  const context = React.useContext(ChartContext)

  if (!context) {
    throw new Error("useChart must be used within a <ChartContainer />")
  }

  return context
}

const ChartContainer = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div"> & {
    config: ChartConfig
    children: React.ComponentProps<
      typeof RechartsPrimitive.ResponsiveContainer
    >["children"]
  }
>(({ id, className, children, config, ...props }, ref) => {
  const uniqueId = React.useId()
  const chartId = `chart-${id || uniqueId.replace(/:/g, "")}`

  return (
    <ChartContext.Provider value={{ config }}>
      <div
        data-chart={chartId}
        ref={ref}
        className={cn(
          "flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none",
          className
        )}
        {...props}
      >
        <ChartStyle id={chartId} config={config} />
        <RechartsPrimitive.ResponsiveContainer>
          {children}
        </RechartsPrimitive.ResponsiveContainer>
      </div>
    </ChartContext.Provider>
  )
})
ChartContainer.displayName = "Chart"

const ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {
  const colorConfig = Object.entries(config).filter(
    ([, config]) => config.theme || config.color
  )

  if (!colorConfig.length) {
    return null
  }

  return (
    <style
      dangerouslySetInnerHTML={{
        __html: Object.entries(THEMES)
          .map(
            ([theme, prefix]) => `
${prefix} [data-chart=${id}] {
${colorConfig
  .map(([key, itemConfig]) => {
    const color =
      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||
      itemConfig.color
    return color ? `  --color-${key}: ${color};` : null
  })
  .join("\n")}
}
`
          )
          .join("\n"),
      }}
    />
  )
}

const ChartTooltip = RechartsPrimitive.Tooltip

const ChartTooltipContent = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &
    React.ComponentProps<"div"> & {
      hideLabel?: boolean
      hideIndicator?: boolean
      indicator?: "line" | "dot" | "dashed"
      nameKey?: string
      labelKey?: string
    }
>(
  (
    {
      active,
      payload,
      className,
      indicator = "dot",
      hideLabel = false,
      hideIndicator = false,
      label,
      labelFormatter,
      labelClassName,
      formatter,
      color,
      nameKey,
      labelKey,
    },
    ref
  ) => {
    const { config } = useChart()

    const tooltipLabel = React.useMemo(() => {
      if (hideLabel || !payload?.length) {
        return null
      }

      const [item] = payload
      const key = `${labelKey || item?.dataKey || item?.name || "value"}`
      const itemConfig = getPayloadConfigFromPayload(config, item, key)
      const value =
        !labelKey && typeof label === "string"
          ? config[label as keyof typeof config]?.label || label
          : itemConfig?.label

      if (labelFormatter) {
        return (
          <div className={cn("font-medium", labelClassName)}>
            {labelFormatter(value, payload)}
          </div>
        )
      }

      if (!value) {
        return null
      }

      return <div className={cn("font-medium", labelClassName)}>{value}</div>
    }, [
      label,
      labelFormatter,
      payload,
      hideLabel,
      labelClassName,
      config,
      labelKey,
    ])

    if (!active || !payload?.length) {
      return null
    }

    const nestLabel = payload.length === 1 && indicator !== "dot"

    return (
      <div
        ref={ref}
        className={cn(
          "grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl",
          className
        )}
      >
        {!nestLabel ? tooltipLabel : null}
        <div className="grid gap-1.5">
          {payload.map((item, index) => {
            const key = `${nameKey || item.name || item.dataKey || "value"}`
            const itemConfig = getPayloadConfigFromPayload(config, item, key)
            const indicatorColor = color || item.payload.fill || item.color

            return (
              <div
                key={item.dataKey}
                className={cn(
                  "flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground",
                  indicator === "dot" && "items-center"
                )}
              >
                {formatter && item?.value !== undefined && item.name ? (
                  formatter(item.value, item.name, item, index, item.payload)
                ) : (
                  <>
                    {itemConfig?.icon ? (
                      <itemConfig.icon />
                    ) : (
                      !hideIndicator && (
                        <div
                          className={cn(
                            "shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]",
                            {
                              "h-2.5 w-2.5": indicator === "dot",
                              "w-1": indicator === "line",
                              "w-0 border-[1.5px] border-dashed bg-transparent":
                                indicator === "dashed",
                              "my-0.5": nestLabel && indicator === "dashed",
                            }
                          )}
                          style={
                            {
                              "--color-bg": indicatorColor,
                              "--color-border": indicatorColor,
                            } as React.CSSProperties
                          }
                        />
                      )
                    )}
                    <div
                      className={cn(
                        "flex flex-1 justify-between leading-none",
                        nestLabel ? "items-end" : "items-center"
                      )}
                    >
                      <div className="grid gap-1.5">
                        {nestLabel ? tooltipLabel : null}
                        <span className="text-muted-foreground">
                          {itemConfig?.label || item.name}
                        </span>
                      </div>
                      {item.value && (
                        <span className="font-mono font-medium tabular-nums text-foreground">
                          {item.value.toLocaleString()}
                        </span>
                      )}
                    </div>
                  </>
                )}
              </div>
            )
          })}
        </div>
      </div>
    )
  }
)
ChartTooltipContent.displayName = "ChartTooltip"

const ChartLegend = RechartsPrimitive.Legend

const ChartLegendContent = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div"> &
    Pick<RechartsPrimitive.LegendProps, "payload" | "verticalAlign"> & {
      hideIcon?: boolean
      nameKey?: string
    }
>(
  (
    { className, hideIcon = false, payload, verticalAlign = "bottom", nameKey },
    ref
  ) => {
    const { config } = useChart()

    if (!payload?.length) {
      return null
    }

    return (
      <div
        ref={ref}
        className={cn(
          "flex items-center justify-center gap-4",
          verticalAlign === "top" ? "pb-3" : "pt-3",
          className
        )}
      >
        {payload.map((item) => {
          const key = `${nameKey || item.dataKey || "value"}`
          const itemConfig = getPayloadConfigFromPayload(config, item, key)

          return (
            <div
              key={item.value}
              className={cn(
                "flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground"
              )}
            >
              {itemConfig?.icon && !hideIcon ? (
                <itemConfig.icon />
              ) : (
                <div
                  className="h-2 w-2 shrink-0 rounded-[2px]"
                  style={{
                    backgroundColor: item.color,
                  }}
                />
              )}
              {itemConfig?.label}
            </div>
          )
        })}
      </div>
    )
  }
)
ChartLegendContent.displayName = "ChartLegend"

// Helper to extract item config from a payload.
function getPayloadConfigFromPayload(
  config: ChartConfig,
  payload: unknown,
  key: string
) {
  if (typeof payload !== "object" || payload === null) {
    return undefined
  }

  const payloadPayload =
    "payload" in payload &&
    typeof payload.payload === "object" &&
    payload.payload !== null
      ? payload.payload
      : undefined

  let configLabelKey: string = key

  if (
    key in payload &&
    typeof payload[key as keyof typeof payload] === "string"
  ) {
    configLabelKey = payload[key as keyof typeof payload] as string
  } else if (
    payloadPayload &&
    key in payloadPayload &&
    typeof payloadPayload[key as keyof typeof payloadPayload] === "string"
  ) {
    configLabelKey = payloadPayload[
      key as keyof typeof payloadPayload
    ] as string
  }

  return configLabelKey in config
    ? config[configLabelKey]
    : config[key as keyof typeof config]
}

export {
  ChartContainer,
  ChartTooltip,
  ChartTooltipContent,
  ChartLegend,
  ChartLegendContent,
  ChartStyle,
}





















